class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        int N = candidates.length;
        List<List<Integer>> result = new ArrayList<>();
        int sum = 0;
        BackTracking(result, new ArrayList<Integer>() , candidates , target , 0 , 0,N);
        return result;
    }
    public void BackTracking(List<List<Integer>> result, ArrayList<Integer> tempList, int[] candidates , int target , int sum, int start,int N)
    {
            
            if(sum>=target){  //Stop the Recursive calls 
                    if(sum==target) {
                       result.add(new ArrayList<>(tempList));     
                    }
                    return ;
            }
            
            for(int i=start;i<N;i++){
                    sum+=candidates[i];
                    tempList.add(candidates[i]);
                    BackTracking(result, tempList , candidates , target ,sum, i,N);
                    sum-=candidates[i];                       //Backtracking
                    tempList.remove(tempList.size()-1);
            }
    }
}

/*
Time Complexity: O(2^t * k) where t is the target, k is the average length

Reason: Assume if you were not allowed to pick a single element multiple times, every element will have a couple of options: pick or not pick which is 2^n different recursion calls, also assuming that the average length of every combination generated is k. (to put length k data structure into another data structure)

Why not (2^n) but (2^t) (where n is the size of an array)?

Assume that there is 1 and the target you want to reach is 10 so 10 times you can “pick or not pick” an element.

Space Complexity: O(k*x), k is the average length and x is the no. of combinations

*/
