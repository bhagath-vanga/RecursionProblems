class Solution {
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        int N = candidates.length;
        Arrays.sort(candidates);
        List<List<Integer>> result = new ArrayList<>();
        int sum =0;    
       BackTracking(result,new ArrayList<Integer>() , candidates, N, target,sum,0);
       return result;      
    }
     public void BackTracking(List<List<Integer>> result , ArrayList<Integer> tempList , int[] nums , int N ,int target , int sum,int start){
          
          if(sum>=target){        //To stop the recursion calls
                  if(sum==target) result.add(new ArrayList<>(tempList));
                  return;
          }   
          
          for(int i=start;i<N;i++){
                 if(i!=start && nums[i]==nums[i-1]) continue;
                 tempList.add(nums[i]);
                 sum+=nums[i];
                 BackTracking(result,tempList , nums, N,target,sum, i+1);
                 sum-=nums[i];                //BackTracking
                 tempList.remove(tempList.size()-1); 
          }   
     }       
}


/*
Time Complexity:O(2^n*k)

Reason: Assume if all the elements in the array are unique then the no. of subsequence you will get will be O(2^n). we also add the ds to our ans when we reach the base case that will take “k”//average space for the ds.

Space Complexity:O(k*x)

Reason: if we have x combinations then space will be x*k where k is the average length of the combination.
*/
