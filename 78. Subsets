class Solution {
    public List<List<Integer>> subsets(int[] nums) {
            
         List<List<Integer>> list = new ArrayList<>(); // To store final result
         backtrack(list, new ArrayList<>(), nums, 0);
        return list;
    }

    private void backtrack(List<List<Integer>> list , List<Integer> tempList, int [] nums, int start){
           
           list.add(new ArrayList<>(tempList));  //Add every subset to the list
          
           for(int i = start ; i<nums.length;i++){
                   tempList.add(nums[i]);       
                   backtrack(list , tempList, nums,i+1);
                   tempList.remove(tempList.size()-1);
           }
    }
}

//TC: O(2^N * N) (for generating all the subsets and and for every subset we are traversing the entire subset to store the numbers in "list") 
//SC: O(N) (for recursive stack space - There we will atmost N elements stored in the stack)
